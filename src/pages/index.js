import React from 'react';
import PropTypes from 'prop-types';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';
import { withStyles } from '@material-ui/core/styles';
import withRoot from '../withRoot';

import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Paper from '@material-ui/core/Paper';
import FormGroup from '@material-ui/core/FormGroup';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Switch from '@material-ui/core/Switch';


const styles = theme => ({
  root: theme.mixins.gutters({
    paddingTop: 0,
  }),

  button: {
    margin: theme.spacing.unit,
  },
  card: {
    minWidth: 275,
  },
  bullet: {
    display: 'inline-block',
    margin: '0 2px',
    transform: 'scale(0.8)',
  },
  title: {
    marginBottom: 16,
    fontSize: 14,
  },
  pos: {
    marginBottom: 12,
  },
});

class Index extends React.Component {
  metrics = {
    unit_tests: {
      label: 'we have Unit-Tests',
      weight: 1,
    },
    unit_tests_coverage: {
      label: 'we have Unit-Tests Coverage',
      weight: 1,
    },
    linter: {
      label: 'we use Linter (js, CSS/HTML, or Python)',
      weight: 1,
    },
    git_hooks: {
      label: 'we\'re using Git Hooks (pre-commit, pre-push)',
      weight: 1,
    },
    ci: {
      label: 'we have Continuous integration',
      weight: 1,
    },
    cd: {
      label: 'we have Continuous deployment',
      weight: 1,
    },
    bug_leakage: {
      label: 'we calculate the Bug leakage',
      weight: 1,
    },
    bugs_per_engineer: {
      label: 'we calculate Bugs per developer',
      weight: 1,
    },
    code_review: {
      label: 'we do Code Review',
      weight: 1,
    },
    pair_programming: {
      label: 'we do Pair programming',
      weight: 1,
    },
    methodology: {
      label: 'Methodology appears (regular daily standups, planning)',
      weight: 1,
    },
    yahni: {
      label: 'i\'m following YAGNI principle during development',
      weight: 1,
    },
    dry: {
      label: 'i\'m following DRY principle during development',
      weight: 1,
    },
    kiss: {
      label: 'i\'m following KISS principle during development',
      weight: 1,
    },
    design_patterns: {
      label: 'i\'m following specific Design Patterns',
      weight: 1,
    },
    functional_programming: {
      label: 'i\'m using Functional programming',
      weight: 1,
    },
    graps: {
      label: 'i\'m following GRASP guidelines',
      weight: 1,
    },
    solid: {
      label: 'i\'m following SOLDI guidelines',
      weight: 1,
    },
    gitignore: {
      label: 'we have gitignore in our repo(s)',
      weight: 1,
    },
    environment_config: {
      label: 'we have use environment to save config',
      weight: 1,
    },
    editorconfig: {
      label: 'we have EditorConfig configuration',
      weight: 1,
    },
    makefile: {
      label: 'we use Makefile or Docker-compose to set up the project',
      weight: 1,
    },
    gitflow: {
      label: 'we\'re following GitFlow (or Github Flow)',
      weight: 1,
    },
    documentation: {
      label: 'we have Documentation',
      weight: 1,
    },
    autogenerated_documentation: {
      label: 'we have Autogenerated Documentation',
      weight: 1,
    },
    readme_md: {
      label: 'we have README.md',
      weight: 1,
    },
  };

  state = {
    score: 0,
  };

  handleChange = key => event => {
    this.setState({
      score: this.state.score + this.metrics[key].weight * (event.target.checked ? 1 : -1)
    });
  };

  render() {
    const { classes } = this.props;

    return (
      <div className={classes.root}>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="title" color="inherit">
              Project Quality Meter
            </Typography>
          </Toolbar>
        </AppBar>

        <Paper className={classes.root} elevation={4}>
          {Object.keys(this.metrics).map((key, i) => {
            const metric = this.metrics[key];

            return <FormGroup row key={key}>
              <FormControlLabel
                control={
                  <Switch
                    checked={this.state[key]}
                    onChange={this.handleChange(key, this)}
                    value="checkedA"
                    color="primary"
                  />
                }
                label={metric.label}
              />
            </FormGroup>
          })}
        </Paper>

        <br/>

        <Card className={classes.card}>
          <CardContent>
            <Typography variant="headline" component="h2">
              {this.state.score} points
            </Typography>
            <Typography className={classes.pos} color="textSecondary">
              is the score of your project
            </Typography>
          </CardContent>
        </Card>

      </div>
    );
  }
}

Index.propTypes = {
  classes: PropTypes.object.isRequired,
};

export default withRoot(withStyles(styles)(Index));
